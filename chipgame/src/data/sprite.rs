use super::*;

#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Copy, Clone, Default, Debug, Eq, PartialEq, Hash)]
pub enum SpriteId {
	#[default]
	Blank,
	Floor,
	Wall,
	Chip,
	Socket,
	Exit1,
	Exit2,
	Exit3,
	Hint,
	Water,
	DirtBlock,
	Dirt,
	Gravel,
	Fire,
	Ice,
	IceCornerNW,
	IceCornerNE,
	IceCornerSW,
	IceCornerSE,
	ForceUp,
	ForceLeft,
	ForceDown,
	ForceRight,
	ForceRandom,
	CloneMachine,
	CloneBlockN,
	CloneBlockW,
	CloneBlockS,
	CloneBlockE,
	ThinWallN,
	ThinWallW,
	ThinWallS,
	ThinWallE,
	ThinWallSE,
	Flippers,
	FireBoots,
	IceSkates,
	SuctionBoots,
	PlayerCheer,
	PlayerWalkNeutral,
	PlayerWalkUp,
	PlayerWalkLeft,
	PlayerWalkDown,
	PlayerWalkRight,
	PlayerSwimNeutral,
	PlayerSwimUp,
	PlayerSwimLeft,
	PlayerSwimDown,
	PlayerSwimRight,
	PlayerBurned,
	PlayerDead,
	WaterSplash,
	BlueKey,
	RedKey,
	GreenKey,
	YellowKey,
	BlueLock,
	RedLock,
	GreenLock,
	YellowLock,
	HiddenWall,
	InvisWall,
	BlueWall,
	BlueWallFake,
	GreenSwitch,
	RedSwitch,
	BrownSwitch,
	BlueSwitch,
	OnOffWall,
	OnOffFloor,
	Bomb,
	Thief,
	Teleport,
	BearTrap,
	RecessedWall,
	BugUp,
	BugLeft,
	BugDown,
	BugRight,
	TankUp,
	TankLeft,
	TankDown,
	TankRight,
	PinkBall,
	FireBall,
	GliderUp,
	GliderLeft,
	GliderDown,
	GliderRight,
	WalkerUpDown,
	WalkerLeftRight,
	TeethUp,
	TeethLeft,
	TeethDown,
	TeethRight,
	Blob,
	ParameciumUpDown,
	ParameciumLeftRight,
}

impl SpriteId {
	pub fn index(self) -> Vec2<i32> {
		match self {
			SpriteId::Blank => Vec2(1, 5),
			SpriteId::Floor => Vec2(0, 0),
			SpriteId::Wall => Vec2(0, 1),
			SpriteId::Chip => Vec2(0, 2),
			SpriteId::Socket => Vec2(2, 2),
			SpriteId::Exit1 => Vec2(3, 9),
			SpriteId::Exit2 => Vec2(3, 10),
			SpriteId::Exit3 => Vec2(3, 11),
			SpriteId::Hint => Vec2(2, 15),
			SpriteId::Water => Vec2(0, 3),
			SpriteId::DirtBlock => Vec2(0, 10),
			SpriteId::Dirt => Vec2(0, 11),
			SpriteId::Gravel => Vec2(2, 13),
			SpriteId::Fire => Vec2(0, 4),
			SpriteId::Ice => Vec2(0, 12),
			SpriteId::IceCornerNW => Vec2(1, 10),
			SpriteId::IceCornerNE => Vec2(1, 11),
			SpriteId::IceCornerSE => Vec2(1, 12),
			SpriteId::IceCornerSW => Vec2(1, 13),
			SpriteId::ForceUp => Vec2(1, 2),
			SpriteId::ForceLeft => Vec2(1, 4),
			SpriteId::ForceDown => Vec2(0, 13),
			SpriteId::ForceRight => Vec2(1, 3),
			SpriteId::ForceRandom => Vec2(3, 2),
			SpriteId::CloneMachine => Vec2(3, 1),
			SpriteId::CloneBlockN => Vec2(0, 14),
			SpriteId::CloneBlockW => Vec2(0, 15),
			SpriteId::CloneBlockS => Vec2(1, 0),
			SpriteId::CloneBlockE => Vec2(1, 1),
			SpriteId::ThinWallN => Vec2(0, 6),
			SpriteId::ThinWallW => Vec2(0, 7),
			SpriteId::ThinWallS => Vec2(0, 8),
			SpriteId::ThinWallE => Vec2(0, 9),
			SpriteId::ThinWallSE => Vec2(3, 0),
			SpriteId::Flippers => Vec2(6, 8),
			SpriteId::FireBoots => Vec2(6, 9),
			SpriteId::IceSkates => Vec2(6, 10),
			SpriteId::SuctionBoots => Vec2(6, 11),
			SpriteId::PlayerCheer => Vec2(3, 8),
			SpriteId::PlayerWalkNeutral => Vec2(3, 4),
			SpriteId::PlayerWalkUp => Vec2(6, 12),
			SpriteId::PlayerWalkLeft => Vec2(6, 13),
			SpriteId::PlayerWalkDown => Vec2(6, 14),
			SpriteId::PlayerWalkRight => Vec2(6, 15),
			SpriteId::PlayerSwimNeutral => Vec2(2, 12),
			SpriteId::PlayerSwimUp => Vec2(3, 12),
			SpriteId::PlayerSwimLeft => Vec2(3, 13),
			SpriteId::PlayerSwimDown => Vec2(3, 14),
			SpriteId::PlayerSwimRight => Vec2(3, 15),
			SpriteId::PlayerBurned => Vec2(3, 5),
			SpriteId::PlayerDead => Vec2(3, 5),
			SpriteId::WaterSplash => Vec2(3, 3),
			SpriteId::BlueKey => Vec2(6, 4),
			SpriteId::RedKey => Vec2(6, 5),
			SpriteId::GreenKey => Vec2(6, 6),
			SpriteId::YellowKey => Vec2(6, 7),
			SpriteId::BlueLock => Vec2(1, 6),
			SpriteId::RedLock => Vec2(1, 7),
			SpriteId::GreenLock => Vec2(1, 8),
			SpriteId::YellowLock => Vec2(1, 9),
			SpriteId::HiddenWall => Vec2(0, 5),
			SpriteId::InvisWall => Vec2(2, 0),
			SpriteId::BlueWall => Vec2(1, 14),
			SpriteId::BlueWallFake => Vec2(1, 15),
			SpriteId::GreenSwitch => Vec2(2, 3),
			SpriteId::RedSwitch => Vec2(2, 4),
			SpriteId::BrownSwitch => Vec2(2, 7),
			SpriteId::BlueSwitch => Vec2(2, 8),
			SpriteId::OnOffWall => Vec2(2, 5),
			SpriteId::OnOffFloor => Vec2(2, 6),
			SpriteId::Bomb => Vec2(2, 10),
			SpriteId::Thief => Vec2(2, 1),
			SpriteId::Teleport => Vec2(2, 9),
			SpriteId::BearTrap => Vec2(2, 11),
			SpriteId::RecessedWall => Vec2(2, 14),
			SpriteId::BugUp => Vec2(4, 0),
			SpriteId::BugLeft => Vec2(4, 1),
			SpriteId::BugDown => Vec2(4, 2),
			SpriteId::BugRight => Vec2(4, 3),
			SpriteId::TankUp => Vec2(4, 12),
			SpriteId::TankLeft => Vec2(4, 13),
			SpriteId::TankDown => Vec2(4, 14),
			SpriteId::TankRight => Vec2(4, 15),
			SpriteId::PinkBall => Vec2(4, 5),
			SpriteId::FireBall => Vec2(4, 4),
			SpriteId::GliderUp => Vec2(5, 0),
			SpriteId::GliderLeft => Vec2(5, 1),
			SpriteId::GliderDown => Vec2(5, 2),
			SpriteId::GliderRight => Vec2(5, 3),
			SpriteId::TeethUp => Vec2(5, 4),
			SpriteId::TeethLeft => Vec2(5, 5),
			SpriteId::TeethDown => Vec2(5, 6),
			SpriteId::TeethRight => Vec2(5, 7),
			SpriteId::WalkerUpDown => Vec2(5, 8),
			SpriteId::WalkerLeftRight => Vec2(5, 9),
			SpriteId::Blob => Vec2(5, 12),
			SpriteId::ParameciumUpDown => Vec2(6, 0),
			SpriteId::ParameciumLeftRight => Vec2(6, 1),
		}
	}
	pub fn uv(self, tex_size: Vec2<i32>) -> Vec2<f32> {
		self.index().map(|c| c as f32 * 34.0 + 1.0) / tex_size.map(|c| c as f32)
	}
}

pub fn create_spritesheet() -> SpriteSheet<SpriteId> {
	let ids = [
	SpriteId::Blank,
	SpriteId::Floor,
	SpriteId::Wall,
	SpriteId::Chip,
	SpriteId::Socket,
	SpriteId::Exit1,
	SpriteId::Exit2,
	SpriteId::Exit3,
	SpriteId::Hint,
	SpriteId::Water,
	SpriteId::DirtBlock,
	SpriteId::Dirt,
	SpriteId::Gravel,
	SpriteId::Fire,
	SpriteId::Ice,
	SpriteId::IceCornerNW,
	SpriteId::IceCornerNE,
	SpriteId::IceCornerSW,
	SpriteId::IceCornerSE,
	SpriteId::ForceUp,
	SpriteId::ForceLeft,
	SpriteId::ForceDown,
	SpriteId::ForceRight,
	SpriteId::ForceRandom,
	SpriteId::CloneMachine,
	SpriteId::CloneBlockN,
	SpriteId::CloneBlockW,
	SpriteId::CloneBlockS,
	SpriteId::CloneBlockE,
	SpriteId::ThinWallN,
	SpriteId::ThinWallW,
	SpriteId::ThinWallS,
	SpriteId::ThinWallE,
	SpriteId::ThinWallSE,
	SpriteId::Flippers,
	SpriteId::FireBoots,
	SpriteId::IceSkates,
	SpriteId::SuctionBoots,
	SpriteId::PlayerCheer,
	SpriteId::PlayerWalkNeutral,
	SpriteId::PlayerWalkUp,
	SpriteId::PlayerWalkLeft,
	SpriteId::PlayerWalkDown,
	SpriteId::PlayerWalkRight,
	SpriteId::PlayerSwimNeutral,
	SpriteId::PlayerSwimUp,
	SpriteId::PlayerSwimLeft,
	SpriteId::PlayerSwimDown,
	SpriteId::PlayerSwimRight,
	SpriteId::PlayerBurned,
	SpriteId::PlayerDead,
	SpriteId::WaterSplash,
	SpriteId::BlueKey,
	SpriteId::RedKey,
	SpriteId::GreenKey,
	SpriteId::YellowKey,
	SpriteId::BlueLock,
	SpriteId::RedLock,
	SpriteId::GreenLock,
	SpriteId::YellowLock,
	SpriteId::HiddenWall,
	SpriteId::InvisWall,
	SpriteId::BlueWall,
	SpriteId::BlueWallFake,
	SpriteId::GreenSwitch,
	SpriteId::RedSwitch,
	SpriteId::BrownSwitch,
	SpriteId::BlueSwitch,
	SpriteId::OnOffWall,
	SpriteId::OnOffFloor,
	SpriteId::Bomb,
	SpriteId::Thief,
	SpriteId::Teleport,
	SpriteId::BearTrap,
	SpriteId::RecessedWall,
	SpriteId::BugUp,
	SpriteId::BugLeft,
	SpriteId::BugDown,
	SpriteId::BugRight,
	SpriteId::TankUp,
	SpriteId::TankLeft,
	SpriteId::TankDown,
	SpriteId::TankRight,
	SpriteId::PinkBall,
	SpriteId::FireBall,
	SpriteId::GliderUp,
	SpriteId::GliderLeft,
	SpriteId::GliderDown,
	SpriteId::GliderRight,
	SpriteId::WalkerUpDown,
	SpriteId::WalkerLeftRight,
	SpriteId::TeethUp,
	SpriteId::TeethLeft,
	SpriteId::TeethDown,
	SpriteId::TeethRight,
	SpriteId::Blob,
	SpriteId::ParameciumUpDown,
	SpriteId::ParameciumLeftRight,
	];

	let mut sprites = HashMap::new();
	let mut frames = Vec::new();
	for &id in &ids {
		sprites.insert(id, SpriteEntry {
			index: frames.len() as u16,
			len: 1,
			duration: 0.0,
		});
		let index = id.index();
		frames.push(SpriteFrame {
			rect: [index.x * 34 + 1, index.y * 34 + 1, 32, 32],
			origin: Vec2(0, 0),
			duration: 0.0,
		});
	}
	SpriteSheet { width: 224, height: 512, sprites, frames }
}
